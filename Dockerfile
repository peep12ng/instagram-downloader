# 1. 베이스 이미지 선택
# 모든 Docker 이미지는 다른 이미지로부터 시작합니다.
# 여기서는 Python 3.11 버전의 가볍고 안정적인 'slim' 버전을 기반으로 합니다.
FROM python:3.11-slim

# 2. 작업 디렉토리 설정
# 컨테이너 안에서 명령어를 실행할 기본 폴더를 지정합니다.
# 앞으로의 모든 작업은 /app 폴더 안에서 이루어집니다.
WORKDIR /app

# 3. 의존성 파일 복사
# 먼저 의존성 정의 파일만 컨테이너에 복사합니다.
# 이렇게 하면, 소스 코드가 변경될 때마다 매번 라이브러리를 새로 설치하는 비효율을 막을 수 있습니다. (도커의 레이어 캐싱 기능)
COPY requirements.txt .

# 4. Python 라이브러리 설치
# requirements.txt에 명시된 모든 라이브러리를 pip를 이용해 설치합니다.
# '--no--cache-dir' 옵션은 불필요한 캐시를 남기지 않아 이미지 크기를 작게 유지하는 데 도움을 줍니다.
RUN pip install --no-cache-dir -r requirements.txt

# 5. Playwright 브라우저 설치
# Playwright는 웹 스크래핑을 위해 실제 브라우저(예: Chromium)가 필요합니다.
# 이 명령어는 Playwright가 제어할 브라우저와 필요한 시스템 라이브러리를 컨테이너 안에 설치합니다.
RUN playwright install --with-deps

# 6. 소스 코드 복사
# 라이브러리 설치가 끝난 후, 나머지 모든 프로젝트 파일(src, templates 등)을 컨테이너 안으로 복사합니다.
COPY . .

# 7. 환경 변수 설정
# Flask가 우리 애플리케이션을 찾을 수 있도록 경로를 알려줍니다.
# 'src' 폴더 안에 있는 'app.py' 파일이 바로 우리 앱의 시작점입니다.
ENV FLASK_APP=src.app

# 8. 포트 노출
# 우리 Flask 앱은 기본적으로 5000번 포트에서 실행됩니다.
# 이 명령은 컨테이너의 5000번 포트를 외부로 개방하겠다고 알려주는 역할을 합니다.
EXPOSE 5000

# 9. 애플리케이션 실행 명령어
# 컨테이너가 시작될 때 최종적으로 실행할 명령어를 정의합니다.
# 'flask run'은 Flask 개발 서버를 실행하는 명령어입니다.
# '--host=0.0.0.0' 옵션은 컨테이너 외부에서도 이 서버에 접속할 수 있도록 해주는 중요한 설정입니다.
CMD ["flask", "run", "--host=0.0.0.0"]